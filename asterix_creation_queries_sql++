drop DATAVERSE TinySocial if exists;
create DATAVERSE TinySocial;
use  TinySocial;

    CREATE TYPE EmploymentType AS {
        organizationName: string,
        startDate: date,
        endDate: date?
    };
    create type FacebookUserType as closed {
        id: int64,
        alias: string,
        name: string,
        user_since: datetime,
        friend_ids: {{ int64 }},
        employment: [EmploymentType]
    };
    create type FacebookMessageType as closed {
        messageId: int64,
        authorId: int64,
        inResponseTo: int64,
        senderLocation: point?,
        message: string
    };

    create type TwitterUserType as open {
        screenName: string,
        lang: string,
        friends_count: int64,
        statuses_count: int64,
        name: string,
        followers_count: int64
};

    create type TweetMessageType as closed {
        tweetid: string,
        user: TwitterUserType,
        sender_location: point?,
        send_time: datetime,
        referred_topics: {{ string }},
        message_text: string
    };


create DATASET FacebookUsers(FacebookUserType) primary key id;

create DATASET FacebookMessages(FacebookMessageType) primary key messageId;

create DATASET TwitterUsers(TwitterUserType) primary key screenName;

create DATASET TwitterMessages(TweetMessageType) primary key tweetid;

load DATASET FacebookUsers using localfs
(("path"="localhost:///home/venktesh/iiit-journey-books-papers/phd-research/understanding_asterix_db/facebook.adm"),("format"="adm"));

load DATASET FacebookMessages using localfs
(("path"="localhost:///home/venktesh/iiit-journey-books-papers/phd-research/understanding_asterix_db/fb_messages.adm"),("format"="adm"));

load DATASET TwitterUsers using localfs
(("path"="localhost:///home/venktesh/iiit-journey-books-papers/phd-research/understanding_asterix_db/twitter_users.adm"),("format"="adm"));

load DATASET TwitterMessages using localfs
(("path"="localhost:///home/venktesh/iiit-journey-books-papers/phd-research/understanding_asterix_db/twitter_messages.adm"),("format"="adm"));








drop dataverse channels if exists;
create dataverse channels;
use channels;

create type UserLocation as closed {
	recordId: uuid,
	location: point,
	user_id: string,
	timeoffset: float
};

create type EmergencyReport as closed {
	reportId: uuid,
	severity: int,
	impactZone: circle,
	timeoffset: float,
	duration: float,
	message: string,
	emergencyType: string
};

create dataset UserLocations(UserLocation)
primary key recordId autogenerated;

create dataset EmergencyReports(EmergencyReport)
primary key reportId autogenerated;

load dataset UserLocations using localfs
(("path"="localhost:///home/venktesh/iiit-journey-books-papers/phd-research/understanding_asterix_db/user_locations.adm"),("format"="adm"));

load dataset EmergencyReports using localfs
(("path"="localhost:///home/venktesh/iiit-journey-books-papers/phd-research/understanding_asterix_db/emergency_reports.adm"),("format"="adm"));